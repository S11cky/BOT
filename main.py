from data_sources import fetch_company_snapshot
import logging
import requests

# Parametre pre filtrovanie IPO
MAX_PRICE = 50  # Zv√Ω≈°en√° cena akcie
MIN_MARKET_CAP = 5e8  # Minim√°lna trhov√° kapitaliz√°cia 500 mili√≥nov USD
SECTORS = ["Technol√≥gie", "Biotechnol√≥gia", "AI", "Zelen√© technol√≥gie", "FinTech", "E-commerce", "HealthTech", "SpaceTech", "Auton√≥mne vozidl√°", "Cybersecurity", "Agritech", "EdTech", "RetailTech"]

# Telegram API nastavenia
TELEGRAM_TOKEN = 'YOUR_TELEGRAM_TOKEN'
TELEGRAM_CHAT_ID = 'YOUR_CHAT_ID'

def send_telegram(message: str) -> bool:
    """Odosiela spr√°vu na Telegram"""
    url = f"https://api.telegram.org/bot{TELEGRAM_TOKEN}/sendMessage"
    payload = {
        "chat_id": TELEGRAM_CHAT_ID,
        "text": message,
        "parse_mode": "HTML"
    }
    
    try:
        response = requests.post(url, json=payload, timeout=5)
        if response.status_code == 200:
            logging.info(f"Spr√°va √∫spe≈°ne odoslan√°: {message[:50]}...")  # Prv√Ωch 50 znakov spr√°vy
            return True
        else:
            logging.error(f"Chyba pri odosielan√≠ spr√°vy: {response.status_code}")
            return False
    except Exception as e:
        logging.error(f"Chyba pri odosielan√≠ Telegram spr√°vy: {e}")
        return False

def fetch_ipo_data(ticker: str):
    """Naƒç√≠tanie d√°t o IPO pre jednotliv√© tickery"""
    try:
        ipo = fetch_company_snapshot(ticker)
        if ipo:
            price = ipo.get("price_usd")
            market_cap = ipo.get("market_cap_usd")
            sector = ipo.get("sector", "")

            # Filtrujeme IPO podƒæa ceny, trhovej kapitaliz√°cie a sektora
            if price is not None and market_cap is not None:
                if price <= MAX_PRICE and market_cap >= MIN_MARKET_CAP:
                    if any(sector in sector_name for sector_name in SECTORS):
                        return ipo
                    else:
                        logging.warning(f"Ignorovan√© IPO {ticker} ‚Äì sektor mimo po≈æiadaviek.")
                else:
                    logging.warning(f"Ignorovan√© IPO {ticker} ‚Äì cena alebo market cap je mimo krit√©ri√≠.")
            else:
                logging.warning(f"Ne√∫pln√© d√°ta pre {ticker}, ignorovan√©.")
        else:
            logging.warning(f"Neboli z√≠skan√© d√°ta pre {ticker}")
    except Exception as e:
        logging.error(f"Chyba pri spracovan√≠ {ticker}: {e}")
    return None

def build_ipo_alert(ipo: dict) -> str:
    """Vytvorenie textu alertu pre Telegram na z√°klade IPO d√°t"""
    
    # Z√≠skanie d√°t z IPO dictu
    company = ipo["company_name"]
    ticker = ipo["ticker"]
    price = ipo["price_usd"]
    market_cap = ipo["market_cap_usd"]
    free_float = ipo.get("free_float_pct", 0)
    insiders_total_pct = ipo.get("insiders_total_pct", 0)
    ipo_date = ipo.get("ipo_first_trade_date", "Nezn√°my")
    days_to_lockup = ipo.get("days_to_lockup", "Nezn√°my")
    
    # Zaokr√∫hlenie hodn√¥t na rozumn√Ω poƒçet desatinn√Ωch miest
    price = round(price, 2)
    market_cap = round(market_cap / 1e9, 2)  # Trhov√° kapitaliz√°cia v miliard√°ch USD
    free_float = round(free_float, 2)
    insiders_total_pct = round(insiders_total_pct, 2)
    
    # V√Ωpoƒçty pre optim√°lny vstup a v√Ωstup (Buy band a Exit band)
    buy_band_lower = round(price * 0.85, 2)  # 15% pod aktu√°lnou cenou
    buy_band_upper = round(price * 0.90, 2)  # 10% pod aktu√°lnou cenou
    exit_band_lower = round(price * 1.10, 2)  # 10% nad aktu√°lnou cenou
    exit_band_upper = round(price * 1.20, 2)  # 20% nad aktu√°lnou cenou
    
    # Definovanie strat√©gie (strategick√Ω pohƒæad)
    strategy = ""
    if free_float > 70:
        strategy += "üîë **Siln√Ω Free Float**: Tento IPO m√° siln√Ω free float, ƒço m√¥≈æe naznaƒçova≈• vy≈°≈°iu likviditu a v√§ƒç≈°√≠ z√°ujem o akcie. M√¥≈æe to by≈• vhodn√° pr√≠le≈æitos≈• na n√°kup. "
    if insiders_total_pct < 10:
        strategy += "‚ö†Ô∏è **N√≠zk√Ω Insider Ownership**: Ni≈æ≈°√≠ podiel insiderov m√¥≈æe znamena≈• ni≈æ≈°iu d√¥veru zo strany zakladateƒæov a zamestnancov. "

    # Vytvorenie form√°tovan√©ho textu pre alert
    message = f"""
üöÄ IPO Alert - {company} ({ticker})

üîπ **Cena akcie**: {price} USD
üîπ **Market Cap**: {market_cap} mili√°rd USD
üîπ **Free Float**: {free_float}%
üîπ **Insider %**: {insiders_total_pct}%
üîπ **IPO D√°tum**: {ipo_date}
üîπ **Lock-up**: {days_to_lockup} dn√≠

üìà **Optim√°lny vstup do poz√≠cie (Buy Band)**: {buy_band_lower} - {buy_band_upper} USD
üéØ **Optim√°lny v√Ωstup z poz√≠cie (Exit Band)**: {exit_band_lower} - {exit_band_upper} USD

üí° **Strategick√Ω pohƒæad**: 
{strategy}
"""
    return message

def fetch_and_filter_ipo_data(tickers: list):
    """Naƒç√≠tanie a filtrovanie IPO d√°t pre viacero tickerov"""
    ipo_data = []
    for ticker in tickers:
        ipo = fetch_ipo_data(ticker)
        if ipo:
            ipo_data.append(ipo)
    
    logging.info(f"Celkov√Ω poƒçet filtrovan√Ωch IPO: {len(ipo_data)}")
    return ipo_data

def send_alerts():
    tickers = ["GTLB", "ABNB", "PLTR", "SNOW", "DDOG", "U", "NET", "ASAN", "PATH"]
    
    logging.info(f"Zaƒç√≠nam monitorova≈• {len(tickers)} IPO spoloƒçnost√≠...")
    
    # Naƒç√≠tanie √∫dajov o spoloƒçnostiach a filtrovanie
    ipo_data = fetch_and_filter_ipo_data(tickers)
    
    # Poslanie alertov len pre filtrovan√© IPO
    for ipo in ipo_data:
        try:
            ipo_msg = build_ipo_alert(ipo)  # Vytvor√≠ spr√°vy pre alerty
            # Odoslanie spr√°vy na Telegram
            success = send_telegram(ipo_msg)
            if success:
                logging.info(f"Alert pre {ipo['ticker']} √∫spe≈°ne odoslan√Ω.")
            else:
                logging.error(f"Chyba pri odosielan√≠ alertu pre {ipo['ticker']}")
        except Exception as e:
            logging.error(f"Chyba pri vytv√°ran√≠ alertu pre {ipo['ticker']}: {e}")
    
    logging.info("Proces dokonƒçen√Ω.")

# Spustenie skriptu na testovanie
if __name__ == "__main__":
    send_alerts()
